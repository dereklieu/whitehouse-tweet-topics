#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var argv = require('minimist')(process.argv.slice(2))
var input = argv.input
var d3 = require('d3')

if (!input) {
  console.log('Needs input')
  process.exit()
}

var output = '../src/json'
document = JSON.parse(fs.readFileSync(input, 'utf-8'))

var aggregate = {}
document.forEach(function (topicData, i) {
  var summary = {}
  var count = topicData.length
  var sorted = topicData.map((d) => Object.assign({}, d, {
    time: new Date(d.year, d.month - 1, d.day)
  })).sort((a, b) => a.time < b.time ? -1 : 1)

  // get 20 random tweets
  var sample = []
  while (sample.length < 20) {
    var idx = Math.floor(Math.random() * (count + 1))
    var item = topicData[idx]
    if (!sample.find((d) => d.id === item.id)) {
      sample.push(item)
    }
  }

  var bymonth = {}
  sorted.forEach(function (d) {
    var prop = String(d.year) + String(d.month - 1)
    bymonth[prop] = bymonth[prop] || 0
    bymonth[prop] += 1
  })

  summary.count = count
  summary.span = [sorted[0].time.getTime(), sorted[count - 1].time.getTime()]
  summary.sample = sample
  summary.months = bymonth

  aggregate[i] = summary

  // clean sorted array for writing
  sorted.forEach(function (d) {
    delete d.time
  })

  // write the sorted data
  fs.writeFileSync(path.resolve(output, i + '.json'), JSON.stringify(sorted))
});

// fill in missing months,
// combine into a single data structure
var topics = Object.keys(aggregate)
var min = new Date(d3.min(topics.map(prop => aggregate[prop].span[0])))
var max = new Date(d3.max(topics.map(prop => aggregate[prop].span[1])))

var currentMonth = min.getMonth()
var currentYear = min.getFullYear()
var endMonth = max.getMonth()
var endYear = max.getFullYear()

console.log(currentYear, '/', currentMonth)
console.log('-')
console.log(endYear, '/', endMonth)

var aggregatedMonths = [] // a chronologically-sorted month-by-month count of tweets
while (currentMonth < endMonth && currentYear <= endYear) {
  while (currentMonth < 12) {
    if (currentYear === endYear && currentMonth > endMonth) { break }
    var dateProp = String(currentYear) + String(currentMonth)
    // console.log(dateProp)

    var aggregatedMonth = { date: { year: currentYear, month: currentMonth } }
    topics.forEach(prop => {
      aggregatedMonth[prop] = aggregate[prop].months[dateProp] || 0
    })
    aggregatedMonths.push(aggregatedMonth)
    currentMonth += 1
  }
  currentMonth = 0
  currentYear += 1
}

var max = d3.max(aggregatedMonths.map(month => topics.reduce((memo,  current) => memo + month[current], 0)))

// replace the months props with a sorted array
topics.forEach(prop => {
  // no longer need span as months are normalized
  delete aggregate[prop].span

  // no longer need disaggregated months
  delete aggregate[prop].months
})

aggregate = {
  months: aggregatedMonths,
  topics: aggregate,
  max: max
}

fs.writeFileSync(path.resolve(output, 'aggregate.json'), JSON.stringify(aggregate))
